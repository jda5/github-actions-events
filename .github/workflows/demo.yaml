name: Deploy Website
on:
  push:
    branches:
      - main

jobs:
  # Test job: Ensures the code passes linting and tests before proceeding.
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3

      # Cache Node.js dependencies to speed up subsequent workflow runs.
      # This uses the `actions/cache` action to save the `.npm` folder.
      # The `key` ensures the cache is uniquely tied to the state of the `package-lock.json` file.
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm  # Directory to cache (Node.js dependency cache).
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}  # Unique cache key based on the lock file.

      # Install dependencies using npm. If the cache is available, this step will use it.
      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Test code
        run: npm run test

  # Build job: Builds the website, uploads build artifacts, and sets a job output.
  build:
    needs: test  # Ensures the build job runs only after the test job succeeds.
    runs-on: ubuntu-latest
    outputs:
        # Defines a job output named 'script-file' that other jobs can reference.
        script-file: ${{ steps.publish.outputs.script-file }}
    steps:
      - name: Get Code
        uses: actions/checkout@v3

      # Cache Node.js dependencies to speed up builds.
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Build Website
        run: npm run build

      # Publish the name of the JavaScript file for use in later steps.
      - name: Publish JS Filename
        id: publish
        run: find dist/assets/*.js -type f -execdir echo 'script-file={}' >> $GITHUB_OUTPUT ';'

      # Upload artifacts to save the build output for the deploy job.
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-files
          path: dist

  # Deploy job: Retrieves the build artifacts and deploys the website.
  deploy:
    needs: build  # Runs only after the build job succeeds.
    runs-on: ubuntu-latest
    steps:
      - name: Get Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-files

      - name: Output Contents
        run: ls
    
      - name: Output Filename
        run: echo ${{ needs.build.outputs.script-file }}

      - name: Deploy
        run: echo "Deploying..."
